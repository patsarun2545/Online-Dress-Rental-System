import { useEffect, useState } from "react";
import { Link, useNavigate, useLocation } from "react-router-dom";
import config from "../config";
import axios from "axios";
import Swal from "sweetalert2";
import "./Navbar.css";

function Navbar() {
  const [categories, setCategories] = useState([]);
  const [customer, setCustomer] = useState(null); // State for user data
  const [searchTerm, setSearchTerm] = useState(""); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const [suggestions, setSuggestions] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
  const [selectedCategoryId, setSelectedCategoryId] = useState(null);
  const location = useLocation(); // ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á URL ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const navigate = useNavigate();

  useEffect(() => {
    fetchCategories();
    fetchCustomerData();
  }, []);

  useEffect(() => {
    const queryParams = new URLSearchParams(location.search);
    const categoryId = queryParams.get("category"); // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ category ‡∏à‡∏≤‡∏Å query string
    setSelectedCategoryId(categoryId ? parseInt(categoryId) : null); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï State
  }, [location.search]); // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ query string ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

  // Fetch categories
  const fetchCategories = async () => {
    try {
      const res = await axios.get(config.apiPath + "/api/categories");
      const activeCategories = res.data.filter(
        (category) => category.status === "active"
      ); // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà active
      setCategories(activeCategories); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ categories ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà active
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:", error);
    }
  };

  // Fetch customer data
  const fetchCustomerData = async () => {
    const token = localStorage.getItem("token");
    if (!token) return; // If no token, user is not logged in

    try {
      const res = await axios.get(config.apiPath + "/api/info", {
        headers: { Authorization: token },
      });
      setCustomer(res.data); // Set user data
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:", error);
      localStorage.removeItem("token"); // Clear token if error occurs
    }
  };

  const handleLogout = async () => {
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
      await axios.post(config.apiPath + "/api/logout");
      localStorage.removeItem("token");
      setCustomer(null); // Clear user data from state

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏î
      Swal.fire({
        title: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö",
        text: "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß.",
        icon: "success",
        timer: 1000, // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        showConfirmButton: false, // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
      });

      navigate("/home"); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Home
    } catch (error) {
      console.error("Logout error:", error);
      Swal.fire({
        title: "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        icon: "error",
      });
    }
  };

  const handleCategoryClick = (categoryId) => {
    setSelectedCategoryId(categoryId); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    navigate(`/home?category=${categoryId}`); // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Home ‡∏û‡∏£‡πâ‡∏≠‡∏° query string
  };

  // Handle search
  const handleSearch = () => {
    if (searchTerm.trim() !== "") {
      setSuggestions([]); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
      navigate(`/home?search=${searchTerm}`); // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà Home ‡∏ú‡πà‡∏≤‡∏ô query string
    }
  };

  const fetchSuggestions = async (query) => {
    try {
      const res = await axios.get(
        config.apiPath + "/product/search/suggestions",
        {
          params: { query },
        }
      );
      setSuggestions(res.data); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:", error);
      setSuggestions([]);
    }
  };

  const handleInputChange = (e) => {
    const value = e.target.value;
    setSearchTerm(value); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if (value.trim() !== "") {
      fetchSuggestions(value); // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    } else {
      setSuggestions([]); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    }
  };

  const handleSuggestionClick = (suggestion) => {
    setSearchTerm(suggestion.name); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å
    setSuggestions([]); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    navigate(`/home?search=${suggestion.name}`); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Home ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  };

  return (
    <>
      {/* Navbar */}
      <nav className="navbar navbar-expand-lg navbar-light bg-white border-bottom">
        <div className="container d-flex align-items-center justify-content-between">
          {/* Logo */}
          <Link to="/home" className="navbar-brand fw-bold me-4">
            ChicBorrow
          </Link>

          {/* Search Bar */}
          <div className="input-group search-bar w-50">
            <span className="input-group-text bg-white border-end-0 border-2 border-secondary rounded-start">
              üî•
            </span>
            <input
              type="text"
              className="form-control border-start-0 border-end-0 border-2 border-secondary"
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à"
              value={searchTerm}
              // onChange={(e) => setSearchTerm(e.target.value)} // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó state ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÑ‡∏ß‡πâ
              onChange={handleInputChange} // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°
            />
            <button
              className="btn btn-dark border-2 border-secondary rounded-end"
              onClick={handleSearch}
            >
              <i className="fas fa-search"></i>
            </button>

            {/* Autocomplete Suggestions */}
            {suggestions.length > 0 && (
              <ul
                className="list-group position-absolute w-100"
                style={{ zIndex: 1000, top: "100%", left: 0 }}
              >
                {suggestions.map((suggestion) => (
                  <li
                    key={suggestion.id}
                    className="list-group-item list-group-item-action"
                    onClick={() => handleSuggestionClick(suggestion)}
                    style={{ cursor: "pointer" }}
                  >
                    {suggestion.name}
                  </li>
                ))}
              </ul>
            )}
          </div>

          {/* Icons */}
          <div className="d-flex align-items-center gap-3">
            {/* User Dropdown */}
            <div className="dropdown">
              <i
                className="fas fa-user dropdown-toggle"
                id="userDropdown"
                data-bs-toggle="dropdown"
                style={{ cursor: "pointer" }}
              ></i>
              <ul
                className="dropdown-menu dropdown-menu-end"
                aria-labelledby="userDropdown"
              >
                {customer ? (
                  <>
                    <li>
                      <span className="dropdown-item-text">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</span>
                      <span className="dropdown-item-text">
                        {customer.name}
                      </span>
                    </li>
                    <li>
                      <Link to="/profile" className="dropdown-item">
                        ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
                      </Link>
                    </li>
                    <li>
                      <Link to="/orders" className="dropdown-item">
                        ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
                      </Link>
                    </li>
                    <li>
                      <button className="dropdown-item" onClick={handleLogout}>
                        ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
                      </button>
                    </li>
                  </>
                ) : (
                  <>
                    <li>
                      <Link to="/singin" className="dropdown-item">
                        ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                      </Link>
                    </li>
                    <li>
                      <Link to="/singup" className="dropdown-item">
                        ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                      </Link>
                    </li>
                  </>
                )}
              </ul>
            </div>

            {/* Shopping Cart and Wishlist */}
            <Link to="/carts" className="text-dark">
              <i className="fas fa-shopping-cart"></i>
            </Link>
            <Link to="/heart" className="text-dark">
              <i className="fas fa-heart"></i>
            </Link>
            <Link to="/contact" className="text-dark">
              <i className="fas fa-phone"></i>
            </Link>
          </div>
        </div>
      </nav>

      {/* Category Menu */}
      <div className="bg-light py-2">
        <div className="container d-flex align-items-center gap-4">
          <span className="fw-bold text-secondary">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</span>
          {categories.length > 0 ? (
            categories.map((category) => (
              <span
                key={category.id}
                className={`text-dark category-item ${
                  selectedCategoryId === category.id ? "active-category" : ""
                }`}
                style={{ cursor: "pointer" }}
                onClick={() => handleCategoryClick(category.id)} // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å
              >
                {category.name}
              </span>
            ))
          ) : (
            <span className="text-secondary">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</span>
          )}
        </div>
      </div>
    </>
  );
}

export default Navbar;
